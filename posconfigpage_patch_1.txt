Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Point Of Sale',
          style: TextStyle(
            fontFamily: 'Arial',
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
         flexibleSpace: Container(
    decoration: const BoxDecoration(
      gradient: LinearGradient(
        colors: [Color.fromARGB(255, 44, 145, 113), Color(0xFF185A9D)],
        begin: Alignment.topLeft,
        end: Alignment.bottomRight,
      ),
    ),
  ),
        backgroundColor: Colors.transparent,
        iconTheme: const IconThemeData(color: Colors.white),
        actions: [
          IconButton(
            icon: const Icon(Icons.exit_to_app),
            tooltip: 'Logout',
            onPressed: () {
             
              Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => const Login()), // Removed posConfig
                (route) => false,
              );

              
            },
          ),
        ],
      ),
      backgroundColor: const Color(0xFFF7F4FB),
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null // Show error widget if there's an error
              ? _buildErrorWidget()
              : _configs.isEmpty
                  ? _buildNoConfigsWidget() // Show no configs widget if list is empty
                  : SingleChildScrollView(
                      padding: const EdgeInsets.all(5),
                      child: Center(
                        child: SingleChildScrollView(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: _configs.map((config) {
                              final int id = config['id'] ?? 0;
                              final String name = config['name'] ?? 'Unnamed POS';
                              final String address = config['shop_addrs'] ?? 'Not set';
                              final double cash = (config['last_session_closing_cash'] ?? 0.0).toDouble();
                              final String shopGstNo = (config['shop_gst_no'] ?? 'Not set').toString();
                              final String shopPhoneNo = config['shop_phone_no']?.toString() ?? '-';
                              final String shopOwnerName = config['shop_owner_name'] ?? 'Unknown';
                              final dynamic rawDate = config['last_session_closing_date'];
                              final String date = (rawDate == false || rawDate == null || rawDate.toString() == 'false')
                                  ? 'N/A'
                                  : _formatDate(rawDate.toString());
                              final dynamic sessionRaw = config['current_session_state'];
                              final int sessionInt = (sessionRaw is int)
                                  ? sessionRaw
                                  : int.tryParse(sessionRaw?.toString() ?? '') ?? 0;
                              final bool sessionState = sessionInt == 1;

 return Padding(
  padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),
  
  child: Card(
    elevation: 4,
    
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(8),
    ),
    color: Colors.white,
    child: Stack(
      children: [
        // Blue background with curved bottom
        Container(
          height: 80,
          decoration: const BoxDecoration(
            color: Colors.blue,
            borderRadius: BorderRadius.only(
              bottomLeft: Radius.circular(40),
              bottomRight: Radius.circular(40),
            ),
          ),
        ), // or any background color you want
     Padding(
      
      padding: const EdgeInsets.all(12.0),
      
      child: _buildPOSConfigCard(
        id: id,
        name: name,
        address: address,
        cash: cash,
        shopGstNo: shopGstNo,
        shopPhoneNo: shopPhoneNo,
        shopOwnerName: shopOwnerName,
        date: date,
        sessionState: sessionState,
        specificConfig: config,
      ),
    ),
      ],
  ),

  ),
);
                           }).toList(),
                          ),
                        ),
                      ),
                    ),
    );
  }
=======
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _loading
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage != null
              ? _buildErrorWidget()
              : _configs.isEmpty
                  ? _buildNoConfigsWidget()
                  : ListView.builder(
                      itemCount: _configs.length,
                      itemBuilder: (context, index) {
                        final config = _configs[index];
                        return POSConfigProfileView(
                          config: config,
                          onRefresh: fetchPOSConfigs,
                          formatDate: _formatDate,
                          getStatusColor: getStatusColor,
                          getStatusText: getStatusText,
                        );
                      },
                    ),
    );
  }
